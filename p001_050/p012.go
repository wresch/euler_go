package main

import (
	"math"
	eu "github.com/wresch/euler_go"
)

var desc string = `
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be \(1 + 2 + 3 + 4 + 5 + 6 + 7
= 28\). The first ten terms would be:

	\[1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\]

Let us list the factors of the first seven triangle numbers:

\begin{verbatim}
	     1: 1
	     3: 1,3
	     6: 1,2,3,6
	    10: 1,2,5,10
	    15: 1,3,5,15
	    21: 1,3,7,21
	    28: 1,2,4,7,14,28
\end{verbatim}

We can see that 28 is the first triangle number to have over five
divisors.

\emph{What is the value of the first triangle number to have over five
hundred divisors?}

To solve this problem, we take advantage of the solution for the
sum of natural numbers:
	\[ \sum_{i=1}^k i = \frac{k(k + 1)}{2} \]
So we can easily generate the triangle numbers.  Furthermore, the smallest
number with 500 distinct divisors


And the already written prime factorization algorithm.


The lowest number to have 500 divisors is probably 62370000.
Start at that number

TODO: finish explanation`

func main() {
	var min_div int64 = 500
	var min_n int64 = 62370000
	k_start := int64(math.Sqrt(2 * float64(min_n)))
	var n int64 = 0
	for k := k_start; ; k ++ {
		n_test := k * (k + 1) / 2
		n_test_pf := eu.IntFreq(eu.PrimeFactors(n_test))
		var n_div int64 = 1
		for _, exp := range n_test_pf {
			n_div *= (exp + 1)
		}
		if n_test > min_n && n_div > min_div {
			n = n_test
			break
		}
	}
	eu.Output(12, desc, n)
}